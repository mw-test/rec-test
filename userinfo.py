# -*- coding: utf-8 -*-

#
# Userinfo.py
#
# Module holding the Userinfo class that performs crud type operations on the userinfo table

import mysql.connector as mysql
from datetime import datetime

class Userinfo():
    """Crud class for userinfo table. 
    Usage: instantiate, one database access then an explicit call to close()"""
    
    def __init__(self, dblogin):
        """open db connection and cursor by passing in db login details as dictionary"""
        self.db = mysql.connect(**dblogin)
        self.cursor = self.db.cursor()

    def close(self):
        """note: explicit call required to close cursor and db connection"""
        self.cursor.close()
        self.db.close()

    def create(self, email, forename, surname):
        """insert one record and return the autogenerated integer userid key"""

        created = datetime.now()

        sql = ("INSERT INTO `userinfo` "
               "(`email`, `forename`, `surname`, `created`) "
               "VALUES "
               "(%s, %s, %s, %s)")

        self.cursor.execute(sql, (email, forename, surname, created))

        return self.cursor.lastrowid

    def retrieve_by_userid(self, key_userid):
        """return one record as dictionary identified by unique userid key"""

        sql = ("SELECT `userid`, `email`, `forename`, `surname`, `created` "
               "FROM userinfo "
               "WHERE `userid` = %s")

        self.cursor.execute(sql, (key_userid,))

        return self.one_record_as_dictionary()
            
    def retrieve_by_email(self, key_email):
        """return one record as dictionary identified by unique email key"""

        sql = ("SELECT `userid`, `email`, `forename`, `surname`, `created` "
               "FROM userinfo "
               "WHERE `email` = %s")

        self.cursor.execute(sql, (key_email,))

        return self.one_record_as_dictionary()

    def update_by_userid(self, key_userid, email, forename, surname):
        """update one record identified by unique userid key"""    

        sql = ("UPDATE userinfo SET "
               "`email` = %s, "
               "`forename` = %s, "
               "`surname` = %s "
               "WHERE `userid` = %s")

        self.cursor.execute(sql, (email, forename, surname, key_userid))

    def delete_by_userid(self, key_userid):
        """delete one record identified by unique userid key"""

        sql = ("DELETE FROM userinfo "
               "WHERE `userid` = %s")

        self.cursor.execute(sql, (key_userid,))

    def one_record_as_dictionary(self):
        """return one record from cursor as a dictionary, cursor must only contain one record"""

        #one iteration only
        for (userid, email, forename, surname, created) in self.cursor:
            return  {'userid': userid, 
                     'email': email, 
                     'forename': forename, 
                     'surname': surname, 
                     'created': '{:%Y-%m-%d %H:%M:%S}'.format(created)}